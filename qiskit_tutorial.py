# -*- coding: utf-8 -*-
"""qiskit_tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15avAYv3Lc7vajd5clyGNNr6JtrOtGObf

# install Qiskit

https://github.com/Qiskit/qiskit-tutorials/issues/359
"""

!pip install qiskit ipywidgets

import qiskit

qiskit.__qiskit_version__

"""# Qiskit 소개

Qiskit을 사용하는 경우 사용자 워크플로우는 다음의 네 가지 상위 레벨 단계로 구성된다.

- Build: 사용자가 고려하고 있는 문제를 나타내는 양자 회로(들) 을 설계한다.
- Compile: 특정 양자 서비스를 위한 회로를 컴파일한다 (예: 양자 시스템 또는 고전 시뮬레이터).
- Run: 지정된 양자 서비스에서 컴파일된 회로를 실행한다. 이러한 서비스는 클라우드 기반 또는 로컬일 수 있다.
- Analyze: 요약적인 통계를 계산하고 실험 결과를 시각화한다.

위의 프로그램은 다음의 여섯 단계로 나누어 질 수 있다.

- 패키지 가져오기
- 변수 초기화
- 게이트 추가
- 회로 시각화
- 실험 시뮬레이션
- 결과 시각화


자세한 설명과 함께 각각의 단계와 전체 작업 흐름을 보여주는 예제를 살펴보자.
"""

'''패키지 가져오기'''

from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram

# QuantumCircuit: 양자 시스템의 설명서로 생각할 수 있다. 여기에는 모든 양자 연산이 포함된다.
# AerSimulator: is the Aer high performance circuit simulator.
# plot_histogram: 히스토그램을 생성한다.

''' 변수 초기화'''
# 2개의 큐비트를 0 상태로 초기화하고, 2개의 고전적인 비트를 0으로 초기화 하는 경우를 생각해 보자. circuit 은 양자 회로를 말한다.
# Create a Quantum Circuit acting on the q register
circuit = QuantumCircuit(2, 2)


'''게이트 추가하기'''
# Add a H gate on qubit 0
# 하다마드 게이트 , 큐비트 0을 중첩 상태 로 만든다.
circuit.h(0)

# Add a CX (CNOT) gate on control qubit 0 and target qubit 1
# 제어 반전 게이트 (CNOT), 조절 큐비트 0과 표적 큐비트 1을 얽힘 상태 로 만든다.
circuit.cx(0, 1)

# Map the quantum measurement to the classical bits
# 모든 양자와 클래식 레지스터들을 측정 한다면, i 번째 큐비트의 측정 결과는 i 번째 클래식 비트에 저장될 것이다.
circuit.measure([0, 1], [0, 1])

''' 회로 시각화하기'''
# Draw the circuit
circuit.draw()

''' 실험 시뮬레이션하기'''
from qiskit import QuantumCircuit, transpile
from qiskit.providers.basicaer import QasmSimulatorPy

# Use Aer's AerSimulator
simulator = AerSimulator()

# Compile the circuit for the support instruction set (basis_gates)
# and topology (coupling_map) of the backend
compiled_circuit = transpile(circuit, simulator)

# Execute the circuit on the aer simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal count for 00 and 11 are:", counts)

'''결과 시각화하기'''
# Plot a histogram
plot_histogram(counts)

"""관측된 확률 $Pr(00)$ 와 $Pr(11)$ 는 각각의 값이 나온 실험의 수를 총 샷 수로 나누어 계산되었다."""

